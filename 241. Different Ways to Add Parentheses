class Solution:
    def diffWaysToCompute(self, expression: str) -> List[int]:
        op = {"+": (lambda x, y: x + y), "-":(lambda x, y: x - y), "*":(lambda x, y: x * y)}
        def dfs(start, end):
            if start >= end:
                return expression[end]
            res = []
            for i in range(start, end + 1):
                if expression[i] in op:
                    left, right = dfs(start, i - 1), dfs(i + 1, end)
                    for l in left:
                        for r in right:
                            res.append(op[expression[i]](int(l), int(r)))
            if not res:
                res.append(int(expression[start: end + 1]))
            return res
        return dfs(0, len(expression) - 1)

class Solution:
    def containVirus(self, grid: List[List[int]]) -> int:
        # infect, danger, wall
        m, n = len(grid), len(grid[0])
        def dfs(r, c):
            visit.add((r, c))
            infect[-1].add((r, c))
            for nr, nc in [(r + 1, c), (r - 1, c), (r, c + 1), (r, c - 1)]:
                if 0 <= nr < m and 0 <= nc < n:
                    if grid[nr][nc] == 1 and (nr, nc) not in visit:
                        dfs(nr, nc)
                    elif grid[nr][nc] == 0:
                        danger[-1].add((nr, nc))
                        wall[-1] += 1
        res = 0
        while True:
            infect, danger, wall, visit = [], [], [], set()
            for i in range(m):
                for j in range(n):
                    if grid[i][j] == 1 and (i, j) not in visit:
                        infect.append(set())
                        danger.append(set())
                        wall.append(0)
                        dfs(i, j)
            if not infect: break
            index = danger.index(max(danger, key = lambda x : len(x)))
            for r, c in infect[index]:
                grid[r][c] = -1
            for i in range(len((danger))):
                if i != index:
                    for r, c in danger[i]:
                        grid[r][c] = 1
            res += wall[index]
        return res

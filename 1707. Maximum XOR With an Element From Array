class Trie:
    def __init__(self):
        self.root = {}
        
    def insert(self, num):
        p = self.root
        for i in range(31, -1, -1):
            cur = (num >> i) & 1
            if cur not in p:
                p[cur] = {}
            p = p[cur]
            
    def query(self, num):
        if not self.root:
            return -1
        res, p = 0, self.root
        for i in range(31, -1, -1):
            cur = (num >> i) & 1
            if 1 - cur in p:
                res |= 1<< i
                p = p[1- cur]
            else:
                p = p[cur]
        return res
    
class Solution:
    def maximizeXor(self, nums: List[int], queries: List[List[int]]) -> List[int]:
        nums.sort()
        res = [-1] * len(queries)
        queries = sorted([(m, i, x) for i, (x, m) in enumerate(queries)])
        j, trie = 0, Trie()
        for m, i, x in queries:
            while j < len(nums) and nums[j] <= m:
                trie.insert(nums[j])
                j += 1
            res[i] = trie.query(x)
        return res
        
 #421. Maximum XOR of Two Numbers in an Array
 class TrieNode:
    def __init__(self):
        self.zero = None
        self.one = None
        
class Solution:
    def findMaximumXOR(self, nums: List[int]) -> int:
        root = TrieNode()
        for num in nums:
            node = root
            for i in range(31, -1, -1):
                if num & 1 << i:
                    if not node.one:
                        node.one = TrieNode()
                    node = node.one
                else:
                    if not node.zero:
                        node.zero = TrieNode()
                    node = node.zero
        res = 0
        for num in nums:
            node = root
            maxi = 0
            for i in range(31, -1, -1):
                if num & 1 << i and node.zero:
                    maxi += 1<<i
                    node = node.zero
                elif not num & 1 <<i and node.one:
                    maxi += 1 << i
                    node = node.one
                else:
                    node = node.one or node.zero
            res = max(res, maxi)
        return res

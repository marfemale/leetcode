class Solution:
    def constrainedSubsetSum(self, nums: List[int], k: int) -> int:
        dp, j, q = [0] * len(nums), 0, []
        for i in range(len(nums)):
            if i - j > k:
                j += 1
            while q and q[0][1] < j:
                heapq.heappop(q)   
            dp[i] = nums[i] + max(0, -q[0][0] if q else 0)
            heapq.heappush(q, (-dp[i], i))
        return max(dp)

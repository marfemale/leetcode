class Solution:
    def superEggDrop(self, k: int, n: int) -> int:
        # dp = [[inf] *(n + 1) for _ in range(k + 1)]
        # for i in range(1, k + 1):
        #     dp[i][0] = 0
        # for j in range(1, n + 1):
        #     dp[1][j] = j
        # for i in range(2, k + 1):
        #     for j in range(1, n + 1):
        #         for x in range(1, j + 1):
        #             dp[i][j] = min(dp[i][j], max(dp[i - 1][x - 1], dp[i][j - x]) + 1)
        # return dp[k][n]
        
        # @lru_cache(None)
        # def dp(i, j):
        #     if j == 0:
        #         return 0
        #     if i == 1:
        #         return j
        #     left, right = 1, j
        #     while left <= right:
        #         mid = (left + right) // 2
        #         t1 = dp(i - 1, mid - 1)
        #         t2 = dp(i, j - mid)
        #         if t1 < t2:
        #             left = mid + 1
        #         else:
        #             right = mid - 1
        #     return 1 + max(dp(i - 1, left - 1), dp(i, j - left))
        # return dp(k, n)
        
        # dp = [[inf] *(n + 1) for _ in range(k + 1)]
        # for i in range(1, k + 1):
        #     dp[i][0] = 0
        # for j in range(1, n + 1):
        #     dp[1][j] = j
        # for i in range(2, k + 1):
        #     x = 1
        #     for j in range(1, n + 1):
        #         while x <= j and dp[i][j - x] > dp[i - 1][x - 1]:
        #             x += 1
        #         dp[i][j] = 1 + dp[i - 1][x - 1]
        # return dp[k][n]
        
        dp = [[0] * (k + 1) for _ in range(n + 1)]
        for i in range(1, n + 1):
            for j in range(1, k + 1):
                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] + 1
            if dp[i][j] >= n:
                return i

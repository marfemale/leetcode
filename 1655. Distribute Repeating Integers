class Solution:
    def canDistribute(self, nums: List[int], quantity: List[int]) -> bool:
        c = list(Counter(nums).values())
        m = len(quantity)
        n = len(c)
        sums = [0] * (1 << m)
        for mask in range(1 << m):
            for i in range(m):
                if mask & (1 << i):
                    sums[mask] += quantity[i]
        @lru_cache(None)
        def dp(mask, i):
            if not mask:
                return True
            if i < 0:
                return False
            cur = mask
            while cur:
                if sums[cur] <= c[i] and dp(mask ^ cur, i - 1):
                    return True
                cur = (cur - 1) & mask
            return dp(mask, i - 1)
        return dp((1 << m) - 1, n - 1)

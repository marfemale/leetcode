class Solution:
    def longestPalindrome(self, s: str) -> str:
        # dp
        n = len(s)
        # dp = [[False] * n for _ in range(n)]
        res = ""
        # for i in range(n):
        #     for j in range(i + 1):
        #         if s[i] == s[j]:
        #             if i == j or j + 1 == i or dp[j + 1][i - 1]:
        #                 dp[j][i] = True
        #                 if i - j + 1 > len(res):
        #                     res = s[j: i + 1]
        # return res
        
        #enumeration time:O(n2), space: O(1)
        # for i in range(n):
        #     #odd
        #     left, right = i, i
        #     while left >= 0 and right < n and s[left] == s[right]:
        #         left -= 1
        #         right += 1
        #     if right - left - 1 > len(res):
        #         res = s[left + 1:right]
        #     #even
        #     left, right = i, i + 1
        #     while left >= 0 and right < n and s[left] == s[right]:
        #         left -= 1
        #         right += 1
        #     if right - left - 1 > len(res):
        #         res = s[left + 1:right]
        # return res
        
        #manacher
        s = "#" + "#".join(s) + "#"
        n = len(s)
        max_raduis, max_pos, max_right, center = 0, 0, 0, 0
        p = [0] * n
        for i in range(1, n):
            if i <= max_right:
                raduis = min(p[center * 2 - i], max_right - i)
            else:
                raduis = 0
            while 0 <= i - raduis and i + raduis < n and s[i - raduis] == s[i + raduis]:
                raduis += 1
            p[i] = raduis - 1
            if p[i] > max_raduis:
                max_raduis, max_pos = p[i], i
            if i + p[i] > max_right:
                max_right, center = i + p[i], i
        return "".join(s[max_pos - max_raduis: max_pos + max_raduis + 1].split("#"))

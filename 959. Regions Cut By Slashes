class DSU:
    def __init__(self, N):
        self.root = [i for i in range(N)]
        
    def find(self, x):
        if x != self.root[x]:
            self.root[x] = self.find(self.root[x])
        return self.root[x]
    
    def union(self, x, y):
        self.root[self.find(x)] = self.find(y)
        
class Solution:
    def regionsBySlashes(self, grid: List[str]) -> int:
        n = len(grid)
        uf = DSU(4 * n * n)
        for i in range(n):
            for j in range(n):
                root = 4 * (n * i + j)
                if grid[i][j] in "/ ":
                    uf.union(root, root + 1)
                    uf.union(root + 2, root + 3)
                if grid[i][j] in "\ ":
                    uf.union(root, root + 2)
                    uf.union(root + 1, root + 3)
                if i > 0:
                    uf.union(root, root + 3 - 4 * n)
                if i < n - 1:
                    uf.union(root + 3, root + 4 * n)
                if j > 0:
                    uf.union(root + 1, root - 2)
                if j < n - 1:
                    uf.union(root + 2, root + 5)
        return sum(uf.find(x) == x for x in range(n * n * 4))
        
        
class Solution:
    def regionsBySlashes(self, grid: List[str]) -> int:
        def dfs(r, c):
            nums[r][c] = 1
            for nr, nc in [(r + 1, c), (r - 1, c), (r, c + 1), (r, c - 1)]:
                if 0<= nr < 3 * n and 0 <= nc < 3 * n and nums[nr][nc] == 0:
                    dfs(nr, nc)
                    
        n = len(grid)
        nums = [[0] * 3 * n for _ in range(3 * n) ]
        for i in range(n):
            for j in range(n):
                if grid[i][j] == "/":
                    nums[3 * i][3 * j + 2] = 1
                    nums[3 * i + 1][3 * j + 1] = 1
                    nums[3 * i + 2][3 * j] = 1
                elif grid[i][j] == "\\":
                    nums[3 * i][3 * j] = 1
                    nums[3 * i + 1][3 * j + 1] = 1
                    nums[3 * i + 2][3 * j + 2] = 1
        res = 0
        for i in range(3 * n):
            for j in range(3 * n):
                if nums[i][j] == 0:
                    res += 1
                    dfs(i, j)
        return res

class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        #recursion time O(2 ^(m + n)) space O(2 ^(m + n))
        # if not p:
        #     return not s
        # first = bool(s) and p[0] in {s[0], "."}
        # if len(p) >= 2 and p[1] == "*":
        #     return self.isMatch(s, p[2:]) or (first and self.isMatch(s[1:], p))
        # else:
        #     return first and self.isMatch(s[1:], p[1:])
        
        # dfs with memo , top dowm, time O(m * n), space O(m * n)
        # @lru_cache(None)
        # def dfs(i, j):
        #     if j == len(p):
        #         return i == len(s)
        #     first = i < len(s) and p[j] in {s[i], "."}
        #     if j + 1 < len(p) and p[j + 1] == "*":
        #         return dfs(i, j + 2) or (first and dfs(i + 1, j))
        #     else:
        #         return first and dfs(i + 1, j + 1)
        # return dfs(0, 0)
        
        #dp, bottom up, time O(m * n), space O(m * n)
        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]
        dp[len(s)][len(p)] = True
        for i in range(len(s), -1, -1):
            for j in range(len(p) - 1, -1, -1):
                first = i < len(s) and p[j] in {s[i], "."}
                if j + 1 < len(p) and p[j + 1] == "*":
                    dp[i][j] = dp[i][j + 2] or (first and dp[i + 1][j])
                else:
                    dp[i][j] = first and dp[i + 1][j + 1]
        return dp[0][0]

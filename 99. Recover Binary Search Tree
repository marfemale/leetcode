# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def recoverTree(self, root: TreeNode) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        # def inorder(root):
        #     return inorder(root.left) + [root] + inorder(root.right) if root else []
        # arr = inorder(root)
        # first, second = None, None
        # for i in range(1, len(arr)):
        #     if not first and arr[i - 1].val > arr[i].val:
        #         first = arr[i - 1]
        #     if first and arr[i - 1].val > arr[i].val:
        #         second = arr[i]
        # first.val, second.val = second.val, first.val
        # return root
        self.first, self.second, self.pre = None, None, None
        def inorder(root):
            if root:
                inorder(root.left)
                if self.pre and not self.first and self.pre.val > root.val:
                    self.first = self.pre
                if self.pre and self.first and self.pre.val > root.val:
                    self.second = root
                self.pre = root
                inorder(root.right)
        inorder(root)
        self.first.val, self.second.val = self.second.val, self.first.val
        return root

class Trie:
    def __init__(self):
        self.zero = None
        self.one = None
        
class Solution:
    def findMaximumXOR(self, nums: List[int]) -> int:
        root = Trie()
        for num in nums:
            node = root
            for i in range(31, -1, -1):
                if num & 1 << i:
                    if not node.one:
                        node.one = Trie()
                    node = node.one
                else:
                    if not node.zero:
                        node.zero = Trie()
                    node = node.zero
        res = 0
        for num in nums:
            maxi = 0
            node = root
            for i in range(31, -1, -1):
                if num & 1 << i and node.zero:
                    maxi += 1 << i
                    node = node.zero
                elif (not num & 1 << i) and node.one:
                    maxi += 1 << i
                    node = node.one
                else:
                    node = node.one or node.zero
            res = max(res, maxi)
        return res
        
        
    class Solution:
    def findMaximumXOR(self, nums: List[int]) -> int:
        n = len(bin(max(nums))) - 2
        maxor = 0
        for i in range(n - 1, -1, -1):
            maxor <<= 1
            preset = set()
            for num in nums:
                pre = num >> i
                preset.add(pre)
                if maxor + 1 ^ pre in preset:
                    maxor += 1
                    break
        return maxor

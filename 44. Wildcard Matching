class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        # if not p:
        #     return not s
        # elif not s:
        #     return not p or all(x == "*" for x in p)
        # if p[0] != "*":
        #     first = p[0] in {s[0], "?"}
        #     return first and self.isMatch(s[1:], p[1:])
        # else:
        #     return self.isMatch(s[1:], p) or self.isMatch(s, p[1:])
        #top down, O(m * n)
        # @lru_cache(None)
        # def dfs(i, j):
        #     if j == len(p):
        #         return i == len(s)
        #     elif i == len(s):
        #         return j == len(p) or all(x == "*" for x in p[j:])
        #     if p[j] != "*":
        #         first = p[j] in {s[i], "?"}
        #         return first and dfs(i + 1, j + 1)
        #     else:
        #         return dfs(i + 1, j) or dfs(i, j + 1)
        # return dfs(0, 0)
        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]
        dp[-1][-1] = True
        for j in range(len(p) - 1, -1, -1):
            if p[j] == "*":
                dp[-1][j] = True
            else:
                break
        for i in range(len(s) - 1, -1, -1):
            for j in range(len(p) - 1, -1, -1):
                if p[j] != "*":
                    first = p[j] in {s[i], "?"}
                    dp[i][j] = first and dp[i + 1][j + 1]
                else:
                    dp[i][j] = dp[i + 1][j] or dp[i][j + 1]
        return dp[0][0]

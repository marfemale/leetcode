class Solution:
    def countRestrictedPaths(self, n: int, edges: List[List[int]]) -> int:
        graph = defaultdict(list)
        for s, e, w in edges:
            graph[s].append((e, w))
            graph[e].append((s, w))
        dis = {}
        hq = [(0, n)]
        path = [0] * (n + 1)
        path[n] = 1
        while hq:
            s, node = heapq.heappop(hq)
            if node in dis:
                continue
            dis[node] = s
            for nxt, wei in graph[node]:
                if nxt not in dis:
                    heapq.heappush(hq, (s + wei, nxt))
                elif dis[nxt] < dis[node]:
                    path[node] += path[nxt]
            if node == 1:
                return path[node] % (10 ** 9 + 7)
        return 0
    
        # @lru_cache(None)
        # def dfs(i):
        #     if i == n:
        #         return 1
        #     res = 0
        #     for j, _ in graph[i]:
        #         if dis[j] < dis[i]:
        #             res += dfs(j)
        #     return res
        # return dfs(1) % (10 ** 9 + 7)

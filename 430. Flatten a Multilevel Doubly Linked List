"""
# Definition for a Node.
class Node:
    def __init__(self, val, prev, next, child):
        self.val = val
        self.prev = prev
        self.next = next
        self.child = child
"""
class Solution:
    def flatten(self, head: 'Node') -> 'Node':
        if not head: return head
        # def dfs(pre, cur):
        #     if not cur:
        #         return pre
        #     if pre:
        #         pre.next, cur.prev = cur, pre
        #     tnext = cur.next
        #     tail = dfs(cur, cur.child)
        #     cur.child = None
        #     return dfs(tail, tnext)
        # dfs(None, head)
        stack, pre = [head], None
        while stack:
            cur = stack.pop()
            if pre:
                pre.next, cur.prev = cur, pre
            pre = cur
            if cur.next:
                stack.append(cur.next)
            if cur.child:
                stack.append(cur.child)
                cur.child = None
        return head

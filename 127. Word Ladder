class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        wordset, wordgraph, queue = set(wordList), defaultdict(set), deque([(beginWord, 1)])
        if endWord not in wordset:
            return 0
        while queue:
            word, step = queue.popleft()
            if word not in wordgraph:
                for i in range(len(word)):
                    for ch in string.ascii_lowercase:
                        newword = word[:i] + ch + word[i + 1:]
                        if ch == word[i]:
                            continue
                        if newword in wordset:
                            wordgraph[word].add(newword)
            if word == endWord:
                return step
            else:
                for newword in wordgraph[word]:
                    queue.append((newword, step + 1))
                wordgraph[word] = set()
        return 0
                        
